# set is an alias for set-option
# -p is to set for pane
# -w is to set for window
# -s is to set for server
# otherwise, it is for session
# if option isn't an user option, -w or -s maybe unnecessary
# -g sets the global session or window option
#
# -a append to the option
# example: set -g status-left "foo"
#          set -ag status-left "bar"
# will result in status-left "foobar"
# setw is an alias for set -w

# colors
set -g default-terminal "tmux-256color"
# set -g default-terminal "xterm-256color"
set -as terminal-features ",*:RGB"
# set -as terminal-features "tmux-256color:RGB"

# undercurl support
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'

# underscore colours - needs tmux-3.0
set -as terminal-overrides ',*:Setulc=\E[58::2::::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'

# xterm keys options
set -g extended-keys on
set -as terminal-features 'xterm*:extkeys'

set -g visual-activity off
set -g monitor-activity off
set -g visual-bell off
set -g activity-action current
set -g bell-action none
set -g detach-on-destroy off

# TODO: melhorar bordas
set -g pane-border-lines single
set -g pane-border-indicators colour
set -g pane-border-style "fg=gray"
set -g pane-active-border-style "fg=white"
set -g focus-events on

unbind C-b
set -g prefix C-Space
bind C-Space send-prefix

# reload config file
bind r source-file ~/.config/tmux/tmux.conf \; display 'config reloaded'

# mouse mode
set -g mouse on
set -s set-clipboard on

# don't rename windows automatically
set -g allow-rename off

# renumber windows when a window is closed
set -g renumber-windows on

# start windows and panes at 1
set -g base-index 1
setw -g pane-base-index 1

# hook for resizing panes on client resize
set-hook -g client-resized resize-pane

# Allows for faster key repetition
set -s escape-time 10

# tmux messages are displayed for 2 seconds
set -g display-time 2000

# increase scrollback buffer size
set -g history-limit 50000

# Tokyo Night Base16 Color Variables
base00="#000000"  # background - Default Background
base01="#232429"  # black - Lighter Background (Used for status bars, line number and folding marks)
base02="#414868"  # brightBlack - Selection Background
base03="#28344A"  # selectionBackground - Comments, Invisibles, Line Highlighting
base04="#A9B1DC"  # foreground - Dark Foreground (Used for status bars)
base05="#C0CAF5"  # white/brightWhite - Default Foreground, Caret, Delimiters, Operators
base06="#C0CAF5"  # cursorColor - Light Foreground (Not often used)
base07="#C0CAF5"  # brightWhite - Light Background (Not often used)
base08="#F7768E"  # red/brightRed - Variables, XML Tags, Markup Link Text, Markup Lists, Diff Deleted
base09="#E0AF68"  # yellow/brightYellow - Integers, Boolean, Constants, XML Attributes, Markup Link Url
base0A="#E0AF68"  # yellow - Classes, Markup Bold, Search Text Background
base0B="#73DACA"  # green/brightGreen - Strings, Inherited Class, Markup Code, Diff Inserted
base0C="#7DCFFF"  # cyan/brightCyan - Support, Regular Expressions, Escape Characters, Markup Quotes
base0D="#7AA2F7"  # blue/brightBlue - Functions, Methods, Attribute IDs, Headings
base0E="#BB9AF7"  # purple/brightPurple - Keywords, Storage, Selector, Markup Italic, Diff Changed
base0F="#BB9AF7"  # purple - Deprecated, Opening/Closing Embedded Language Tags


session="#{?client_prefix,#[fg=gray15#,bg=gray50#,bold],#[bg=$base01,fg=$base05]} ÓØà #S "
folder="#[bg=$base01,fg=$base05]Ó´∑ #{b:pane_current_path}"

set -g status-position top
set -g status-interval 1
set -g status-justify absolute-centre
set -g status-style "bg=$base01"
set -g status-left-length 80
set -g status-left "$session"
set -g status-right-length 300
set -g status-right "$folder"
set -g window-status-style "fg=$base02"
set -g window-status-format " Ó™Ö #W "
set -g window-status-current-style "fg=$base0D"
set -g window-status-current-format " Ó™Ö #W "
set -g window-status-separator ""

# no confirm before kill pane/window
bind w kill-pane

# kill window with all panes no confirm
bind x kill-window

bind - splitw -v -c "#{pane_current_path}"
bind % splitw -h -c "#{pane_current_path}"

# new window
bind t new-window -c "#{pane_current_path}"

# Switch ? and /
bind ? list-keys -N
bind / command-prompt -k -p key { list-keys -1N "%%" }

# Open notes in a floating pane
bind o display-popup -E -w 80% -h 60% -T "Scratchpad" "nvim \"/mnt/c/Users/lrabello/Documents/Obsidian Vaults/SecondBrain/Scratchpad.md\""
bind i display-popup -E -w 80% -h 60% -T "Activity Log" "nvim \"/mnt/c/Users/lrabello/Documents/Obsidian Vaults/SecondBrain/_Weekly/$(date +%Y)/$(date +%Y)-W$(date +%V).md\""

# Man popup with fzf
bind M display-popup -E -y 15 -w 60% -h 40% 'man -k . | fzf -q "$1" --prompt="man> " --preview-window=down:70% --preview "echo {} | tr -d \"()\" | awk \"{printf \\\"%s \\\", \$2} {print \$1}\" | xargs -r man" | tr -d "()" | awk "{printf \"%s \", \$2} {print \$1}" | xargs -r man'

bind s run "sesh connect \"$(
  sesh list -H -t --icons | fzf-tmux -p 55%,60% \
    --no-sort --ansi --border-label ' sesh ' --prompt '‚ö°  ' \
    --header '^t tmux ^g configs ^x zoxide ^delete tmux kill ^f find ^a all' \
    --bind 'tab:down,btab:up' \
    --bind 'ctrl-t:change-prompt(ü™ü  )+reload(sesh list -t --icons)' \
    --bind 'ctrl-a:change-prompt(‚ö°  )+reload(sesh list --icons)' \
    --bind 'ctrl-g:change-prompt(‚öôÔ∏è  )+reload(sesh list -c --icons)' \
    --bind 'ctrl-x:change-prompt(üìÅ  )+reload(sesh list -z --icons)' \
    --bind 'ctrl-f:change-prompt(üîé  )+reload(fd -H -d 2 -t d -E .Trash . ~)' \
    --bind 'ctrl-delete:execute(tmux kill-session -t {2..})+change-prompt(‚ö°  )+reload(sesh list -t --icons)' \
)\""

# pane movement with smart-splits.nvim
bind -n M-Left if -F "#{@pane-is-vim}" 'send-keys C-Left'  'select-pane -L'
bind -n M-Right if -F "#{@pane-is-vim}" 'send-keys C-Right'  'select-pane -R'
bind -n M-Up if -F "#{@pane-is-vim}" 'send-keys C-Up'  'select-pane -U'
bind -n M-Down if -F "#{@pane-is-vim}" 'send-keys C-Down'  'select-pane -D'

bind L split-window -h -p 35 -c "#{pane_current_path}" "copilot"

bind -n C-S-Left previous-window
bind -n C-S-Right next-window

setw -g mode-keys vi
if-shell "uname | grep Darwin" {
   bind-key -T copy-mode-vi y send -X copy-pipe-and-cancel 'reattach-to-user-namespace pbcopy'
   bind-key -T copy-mode-vi Enter send -X copy-pipe-and-cancel 'reattach-to-user-namespace pbcopy'
   bind -T copy-mode-vi S-MouseDragEnd1Pane send-keys -X copy-selection -x 'reattach-to-user-namespace'
} {
   bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "clip.exe"
   bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "clip.exe"
   bind -T copy-mode-vi S-MouseDragEnd1Pane send-keys -X copy-selection -x "clip.exe"
}
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi r send-keys -X rectangle-toggle
bind -T copy-mode-vi S-MouseDown1Pane send-keys -X clear-selection
bind -T copy-mode-vi Escape send-keys -X cancel

#### Plugins
set-environment -gF TMUX_PLUGIN_MANAGER_PATH '#{HOME}/.local/share/tmux/plugins'
if 'test ! -d "${TMUX_PLUGIN_MANAGER_PATH}/tpm"' {
  run 'mkdir -p "${TMUX_PLUGIN_MANAGER_PATH}"'
  run 'git clone https://github.com/tmux-plugins/tpm "${TMUX_PLUGIN_MANAGER_PATH}/tpm"'
  run '${TMUX_PLUGIN_MANAGER_PATH}/tpm/bin/install_plugins'
}
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'kenos1/tmux-cht-sh'
set -g @plugin 'b0o/tmux-autoreload'
set -g @plugin 'nhdaly/tmux-better-mouse-mode'
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'Morantron/tmux-fingers'

run '#{TMUX_PLUGIN_MANAGER_PATH}/tpm/tpm'
